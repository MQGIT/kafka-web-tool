apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-web-app-backend
  namespace: {{NAMESPACE}}
  labels:
    app: kafka-web-app-v2
    component: backend
    version: "2.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: kafka-web-app-v2
      component: backend
  template:
    metadata:
      labels:
        app: kafka-web-app-v2
        component: backend
        version: "2.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/api/v1/actuator/prometheus"
    spec:
      containers:
      - name: backend
        image: {{REGISTRY}}/{{BACKEND_IMAGE}}:{{IMAGE_TAG}}
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "production"
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: kafka-web-app-secrets
              key: DB_USERNAME
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kafka-web-app-secrets
              key: DB_PASSWORD
        - name: REDIS_HOST
          value: "redis"
        - name: REDIS_PORT
          value: "6379"
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "localhost:9092"  # Update with your Kafka cluster
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: kafka-web-app-secrets
              key: JWT_SECRET
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /api/v1/health/live
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/v1/health/ready
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /api/v1/health/live
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10
      volumes:
      - name: config
        configMap:
          name: kafka-web-app-config
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: kafka-web-app-backend
  namespace: {{NAMESPACE}}
  labels:
    app: kafka-web-app-v2
    component: backend
spec:
  selector:
    app: kafka-web-app-v2
    component: backend
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-web-app-frontend
  namespace: {{NAMESPACE}}
  labels:
    app: kafka-web-app-v2
    component: frontend
    version: "2.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: kafka-web-app-v2
      component: frontend
  template:
    metadata:
      labels:
        app: kafka-web-app-v2
        component: frontend
        version: "2.0.0"
    spec:
      containers:
      - name: frontend
        image: {{REGISTRY}}/{{FRONTEND_IMAGE}}:{{IMAGE_TAG}}
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        # No volume mounts needed - React app is built into the image
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 10
      # No volumes needed - React app is built into the image
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: kafka-web-app-frontend
  namespace: {{NAMESPACE}}
  labels:
    app: kafka-web-app-v2
    component: frontend
spec:
  selector:
    app: kafka-web-app-v2
    component: frontend
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  type: ClusterIP
