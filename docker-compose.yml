version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: kafka-web-app-postgres
    environment:
      POSTGRES_DB: kafka_web_app
      POSTGRES_USER: kafka_user
      POSTGRES_PASSWORD: kafka_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/main/resources/db/init:/docker-entrypoint-initdb.d
    networks:
      - kafka-web-app

  # Redis for Session Storage
  redis:
    image: redis:7-alpine
    container_name: kafka-web-app-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - kafka-web-app

  # Kafka (for development)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: kafka-web-app-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-web-app

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-web-app-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - kafka-web-app

  # Backend Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: kafka-web-app-backend
    depends_on:
      - postgres
      - redis
      - kafka
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: development
      DATABASE_URL: jdbc:postgresql://postgres:5432/kafka_web_app
      DATABASE_USERNAME: kafka_user
      DATABASE_PASSWORD: kafka_password
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      REDIS_URL: redis://redis:6379
    volumes:
      - ./backend/logs:/app/logs
    networks:
      - kafka-web-app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: kafka-web-app-frontend
    depends_on:
      - backend
    ports:
      - "3000:3000"
    environment:
      VITE_API_BASE_URL: http://localhost:8080/api/v1
      VITE_WS_BASE_URL: ws://localhost:8080/ws
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    networks:
      - kafka-web-app

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: kafka-web-app-nginx
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - kafka-web-app

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: kafka-web-app-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - kafka-web-app

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: kafka-web-app-grafana
    depends_on:
      - prometheus
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - kafka-web-app

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  kafka-web-app:
    driver: bridge
